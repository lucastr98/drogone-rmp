<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="huenliwald"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="paused" default="false"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find huenli_world)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find huenli_world)/worlds/$(arg world_name).world" />
      <arg name="paused" value="$(arg paused)" />
      <arg name="gui" value="$(arg gui)" />
  </include>

  <group ns="$(arg mav_name)">
      <!-- launch correct mav and it's controller -->
      <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
          <arg name="mav_name" value="$(arg mav_name)" />
          <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
          <arg name="enable_logging" value="$(arg enable_logging)" />
          <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
          <arg name="log_file" value="$(arg log_file)"/>
          <arg name="x" value="0"/>
          <arg name="y" value="0"/>
          <arg name="z" value="0.3"/>
      </include>

      <!-- launch non linear MPC Controller -->
      <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
        <remap from="odometry" to="ground_truth/odometry" />
        <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name)_simulation.yaml" />
        <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name)_simulation.yaml"/>
        <param name="use_rc_teleop" value="false"/>
        <param name="verbose" value="true" />
        <param name="reference_frame" value="world"/>
      </node>

      <!-- launch lowlevel altitude PID controller -->
      <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
        <remap from="odometry" to="ground_truth/odometry" />
        <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
      </node>

      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  </group>

  <!-- launch rviz with simulation nodes: visualization, back_to_position_hold and check for catch -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find drogone_simulation)/cfg/rviz_view_$(arg mav_name).rviz" />

  <node name="visualization" pkg="drogone_simulation" type="visualization" output="screen">
      <remap from="drogone/odometry_sensor1/odometry" to="$(arg mav_name)/odometry_sensor1/odometry"/>
      <remap from="drogone/trajectory" to="$(arg mav_name)/trajectory"/>
      <remap from="drogone/ground_truth_tracker" to="$(arg mav_name)/ground_truth_tracker"/>
  </node>

  <group ns="$(arg mav_name)"> <!-- check for catch communicates with FSM -> needs same namespaces as FSM-->
      <node name="check_for_catch" pkg="drogone_simulation" type="check_for_catch" output="screen">
          <rosparam command="load" file="$(find drogone_simulation)/cfg/check_for_catch_params.yaml"/>
      </node>
  </group>

  <!-- launch victim drone  -->
  <node name="victim_drone" pkg="drogone_victim_drone" type="victim_drone.py" output="screen">
    <remap from="drogone/ground_truth_tracker" to="$(arg mav_name)/ground_truth_tracker"/>
  </node>

  <!-- launch node to calculate distance 2 ground -->
  <node name="altitude_node" pkg="cpt_utils" type="altitude_node">
    <param name="mesh_path" value="$(find huenli_world)/models/huenliwald_mesh/meshes/huenliwald.off" />
    <remap from="/altitude_node/odometry" to="$(arg mav_name)/odometry_sensor1/odometry"/>
  </node>

  <node name="mesh_publisher" pkg="cpt_utils" type="mesh_publisher_node" output="screen">
      <param name="publish_on_start" value="true"/>
      <param name="default_filename" value="$(find huenli_world)/models/huenliwald_mesh/meshes/huenliwald.off"/>
      <param name="frame_name" value="world"/>
  </node>


</launch>
