<launch>
    <arg name="mav_name" default="peregrine"/>
    <arg name="world_name" default="basic"/>
    <arg name="enable_logging" default="false" />
    <arg name="enable_ground_truth" default="true" />
    <arg name="log_file" default="peregrine" />
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <!-- The following line causes gzmsg and gzerr messages to be printed to the console
        (even when Gazebo is started through roslaunch) -->
    <arg name="verbose" default="false"/>

    <!-- launch gazebo model -->
    <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
    <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <!-- launch motion planner -->
    <group ns="$(arg mav_name)">

      <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
          <arg name="mav_name" value="$(arg mav_name)" />
          <!-- The Odometry Sensor includes the peregrine_base.xacro -->
          <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
          <arg name="enable_logging" value="$(arg enable_logging)" />
          <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
          <arg name="log_file" value="$(arg log_file)"/>
          <arg name="x" value="0"/>
          <arg name="y" value="0"/>
          <arg name="z" value="0.3"/>
      </include>

      <!-- launch non linear MPC Controller -->
      <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">      <!-- output = "screen"-->
        <remap from="odometry" to="ground_truth/odometry" />
        <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
        <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
        <param name="use_rc_teleop" value="false"/>
        <param name="verbose" value="true" />
        <param name="reference_frame" value="world"/>
      </node>

      <!-- launch lowlevel altitude PID controller -->
      <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">  <!-- output = "screen"-->
        <remap from="odometry" to="ground_truth/odometry" />
        <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
      </node>

      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

      <!-- <node name="rmp" pkg="drogone_rmp" type="rmp_node" output="screen"> -->
      <node name="rmp" pkg="drogone_rmp" type="rmpcpp_example_node" output="screen">
        <rosparam command="load" file="$(find drogone_rmp)/cfg/$(arg mav_name)_params.yaml"/>
          <remap from="uav_pose" to="odometry_sensor1/odometry"/>
      </node>

    </group>

</launch>
